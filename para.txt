discord.py has an extensive collection of features. Events are one of the most useful of these. Events are used for welcoming bots, reaction roles, and lots of other functions. This guide will teach you more about events, and how you can use them in your discord bot. In the end, we will have the bot print to the console when it is signed in, and give it a simple moderation and logging system.

If you haven't yet, I suggest reading the earlier post in this series, as this builds on the previous post.

So far, we have the following code:
import discord
from discord.ext import commands

bot = commands.Bot(command_prefix="!", case_insensitive=True)

@bot.command(name='hello', description="Greet the user!")
async def hello(ctx):
    await ctx.send(f"Hello {ctx.author.name}!") # f-string

bot.run('token')
But what if we want to delete a message when a user sends a link in the chat? They obviously wouldn't use a command.

We can use the on_message event to trigger a function whenever a message is sent.

We first want to use the event decorator to tell discord.py that this is an event.
@bot.event
async def on_message(message):
   if 'https://' in message.content:
      await message.delete()
      await message.channel.send(f"{message.author.mention} Don't send links!")
   else:
      await bot.process_commands(message)
Now, if we send a link, the bot will warn us!
Demo

Automoderation ðŸ”§
But what if we want to create a profanity list?
badwords = ['bad', 'words', 'here']

@bot.event
async def on_message(message):
   for i in badwords: # Go through the list of bad words;
      if i in message:
         await message.delete()
         await message.channel.send(f"{message.author.mention} Don't use that word here!")
         return # So that it doesn't try to delete the message again.
   await bot.process_commands(message)
Logging ðŸ“œ
Events are called by using the dispatch function. When a message is sent, the internals of discord.py uses bot.dispatch('message', message_object). This triggers other parts of discord.py to find the function called on_message and run it. So, we could make our own even